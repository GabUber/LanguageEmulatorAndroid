package edu.poc.languageemulatorandroid;

import gerenciaArquivo.GerenciaArquivo;

import java.util.ArrayList;

import lingua.Lingua;
import mensageiro.Mensageiro;
import android.app.Activity;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Point;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v7.app.ActionBarActivity;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import autogeneretadeanduglylanguagethingsdonottouch.SalvavelTextiveis;

public abstract class Salvavel extends ActionBarActivity{
	/*@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
//		if (id == R.id.action_settings) {
//			return true;
//		}
		return super.onOptionsItemSelected(item);
	}*/
	
	String Deletar;
	String Abrir;
	String Salvar;
	String Sobreescrever;
	String arquivo;
	String arquivoNome;
	String temp;
	Lingua lingua;
	Menu m;
	ArrayList<Lingua> linguas;
	int w, h;
	protected static final int dimensao = 10;
	boolean primeiro=true;
	protected int dimensaomm;
	boolean aenviar;
	boolean menuaberto;
	boolean menuConfirmaAberto;
	boolean salvar;
	boolean abrir;
	boolean sobreescrever;
	boolean menuSetado;
	Button setaTipo;
	LinearLayout adicioneaqui;
	LinearLayout menuarquivo;
	LinearLayout menuconfirma;
	EditText entradaNomeArquivo;
	TextView textoconfirma;
	LinearLayout inicial;
	RelativeLayout rl;
	Resources r;
	String nomeAtividade;
	@Override
	protected void onCreate(Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		FragmentoGeral.telaPequena=telaPequena();
	}
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		m=menu;
		// Inflate the menu; this adds items to the action bar if it is present.
		new MenuInflater(this).inflate(R.menu.outros, menu);
		return true;
	}
	@Override
	public boolean onMenuOpened(int featureId, Menu menu){
		if(!menuSetado){
			menuSetado=true;
			carregaTextiveisMenu();
			setaLinguaMenus();
		}
		return super.onMenuOpened(featureId, menu);
	}
	protected void setaLinguaMenus() {
		SalvavelTextiveis.setaLinguaMenusSalvavel(lingua);
	}
	@Override
	public void onStart(){
		super.onStart();
		if(!primeiro)return;
		criaComum();
		criaEspecifico();
		SalvavelTextiveis.carregaTextiveis((Activity) pegaContexto());
		carregaTextiveisEspecifico();
		recebeMensageiro();
		rl.bringToFront();
		primeiro=false;
	}

	protected void carregaTextiveisMenu() {
		SalvavelTextiveis.carregaTextiveisMenuSalvavel(m);
	}

	protected abstract void carregaTextiveisEspecifico();

	public abstract static class FragmentoGeral extends Fragment{
		Salvavel s;
		static public boolean telaPequena;
		protected View ligaFragmentoGeral(ViewGroup V, LayoutInflater inflater, ViewGroup container){
			V.addView(inflater.inflate(R.layout.comum, container, false));
			return V;
		}
	}
	public abstract class MalformedFileException extends Exception{
		private static final long serialVersionUID = 1088345857261989617L;//autogenerated
		}
	public abstract String toString(View v);
	public abstract void parse(String s) throws MalformedFileException;
	public boolean salvar(MenuItem m){
		arquivo=toString(null);
		if(arquivoNome==null) salvarcomo(m);
		else{
			arquivo=toString(null);
			GerenciaArquivo.salva(arquivo, arquivoNome, aenviar, pegaContexto(), lingua);
			cancelaComum(null);
			atualizaNomeAtividade();
			aenviar=false;
		}
		return false;
	}
	public boolean salvarcomo(MenuItem m){
		arquivo=toString(null);
		abreMenuArquivo(Salvar);
		abrir=false;
		return false;
	}
	private void abreMenuArquivo(String s) {
		setaTipo.setText(s);
		menuaberto=true;
		GerenciaArquivo.setaNomes(adicioneaqui, pegaContexto(), dimensaomm);
		menuarquivo.setVisibility(View.VISIBLE);
		rl.bringToFront();
	}
	public boolean abrir(MenuItem m){
		abreMenuArquivo(Abrir);
		abrir=true;
		return false;
		}
	public boolean salvaenvia(MenuItem m){
		aenviar=true;
		salvar(m);
		return false;
	}
	public boolean setaLingua(MenuItem m){
		String s = m.getTitle().toString();
		boolean mudou = setalRetornaModificado(s);
		if(!mudou) return false;
		GerenciaArquivo.salvaLingua(s, pegaContexto());
		setaLingua();
		return false;
	}
	public void confirma(View v){
		if(menuConfirmaAberto) return;
		temp = entradaNomeArquivo.getText().toString();
		entradaNomeArquivo.setText("");
		String tipo = setaTipo.getText().toString();
		if(tipo.equals(Abrir)){if(GerenciaArquivo.contem(temp)){
			arquivo=GerenciaArquivo.abre(temp, pegaContexto());
			arquivoNome=temp;
			cancelaComum(null);
			preparaMensageiro(true);
			Intent intent = new Intent(pegaContexto(), MainActivity.class);
		    startActivity(intent);
		}}
		else{ if(GerenciaArquivo.contem(temp)){
			salvar=true;
			sobreescrever=true;
			abreMenuConfirmar(Sobreescrever);
		}
		else{
			arquivoNome=temp;
			GerenciaArquivo.salva( arquivo, arquivoNome, aenviar, pegaContexto(), lingua);
			atualizaNomeAtividade();
			aenviar=false;
			cancelaComum(null);
			menuaberto=false;
		}}
	}
	protected void abreMenuConfirmar(String s){
		textoconfirma.setText(s);
		menuConfirmaAberto=true;
		menuconfirma.setVisibility(View.VISIBLE);
	}
	public void deleta(View V){
		if(menuConfirmaAberto) return;
		temp=entradaNomeArquivo.getText().toString();
		entradaNomeArquivo.setText("");
		if(GerenciaArquivo.contem(temp)){
			salvar=false;
			abreMenuConfirmar(Deletar);
		}
	}
	public void cancelaComum(View v){
		if(menuConfirmaAberto) return;
		menuaberto=false;
		menuarquivo.setVisibility(View.GONE);
		trazOutroATona();
	}
	protected abstract void trazOutroATona();
	public void confirmamenuconfirma(View v){
		apagamenuconfirma(v);
		if(salvar){
			arquivoNome=temp;
			salvar=false;
			cancelaComum(null);
			GerenciaArquivo.salva(arquivo, temp, aenviar, pegaContexto(), lingua);
			atualizaNomeAtividade();
			aenviar=false;
		}
		else{
			GerenciaArquivo.deleta(temp);
			GerenciaArquivo.setaNomes(adicioneaqui, pegaContexto(), dimensaomm);
		}
	}
	public void apagamenuconfirma(View v){
		menuConfirmaAberto=false;
		menuconfirma.setVisibility(View.GONE);
	}
	public abstract Salvavel pegaContexto();
	public abstract void criaEspecifico();
	public void criaComum(){
		if(Mensageiro.carrega)mandaArquivo();
		if(!Mensageiro.setouDir){
			Mensageiro.setouDir=true;
			GerenciaArquivo.setaDiretorio(pegaContexto(), getResources());
		}
		Point ponto = new Point();
		getWindowManager().getDefaultDisplay().getSize(ponto);
		w=ponto.x;
		h=ponto.y;
		r=getResources();
		rl=(RelativeLayout)findViewById(R.id.comum);
		inicial = (LinearLayout) findViewById(R.id.inicial);
		menuconfirma = (LinearLayout) findViewById(R.id.leiauteconfirma);
		adicioneaqui = (LinearLayout) findViewById(R.id.adicioneaqui);
		entradaNomeArquivo = (EditText) findViewById(R.id.nomearquivo);
		setaTipo = (Button) findViewById(R.id.butaoconfirma);
		menuarquivo= (LinearLayout) findViewById(R.id.menuarquivo);
		textoconfirma = (TextView) findViewById(R.id.textoconfirma);
		dimensaomm = (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_MM, dimensao, r.getDisplayMetrics());
	}
	protected void preparaMensageiro(boolean b) {
		Mensageiro.arquivo=arquivo;
		Mensageiro.lingua=linguas.indexOf(lingua);
		Mensageiro.nomeArquivo= b ? arquivoNome :null ;
		Mensageiro.linguas = linguas;
		Mensageiro.carrega=b;
	}
	public void someInicial(View V){
		inicial.setVisibility(View.GONE);
		menuaberto=false;
	}
	protected void recebeMensageiro() {
		arquivo = Mensageiro.arquivoPausa==null ? Mensageiro.arquivo : Mensageiro.arquivoPausa;
		if(arquivo!=null){
			Mensageiro.arquivoPausa=null;
			try{
				parse(arquivo);
			}
			catch(MalformedFileException e){}
		}
		arquivoNome = Mensageiro.nomeArquivo;
		linguas = Mensageiro.linguas;
		if(linguas==null) linguas = Lingua.criaLinguas(r);
		int i = Mensageiro.lingua;
		if(i==-1) i=Lingua.pegaL(GerenciaArquivo.pegaLingua(pegaContexto()));
		lingua = linguas.get(i);
		setaLingua();
		atualizaNomeAtividade();
	}
	private void atualizaNomeAtividade() {
		if (arquivoNome!=null)setTitle(nomeAtividade + " - " + arquivoNome);
	}
	private boolean setalRetornaModificado(String s) {
		int l = Lingua.pegaL(s);
		Lingua temp = linguas.get(l);
		if(temp.equals(lingua)) return false;
		lingua=temp;
		return true;
	}
	protected void apagaFilhos(boolean horizontal, View... vs){
		ViewGroup grupo = (ViewGroup) vs[0].getParent();
		float x = grupo.getX();
		int removidos=0;
		int w = grupo.getWidth(), h = grupo.getHeight();
		int total = grupo.getChildCount();
		for(View v : vs){
			removidos++;
			v.setVisibility(View.GONE);
		}
		if(removidos==0)return;
		float d = ((float)removidos)/total;
		LayoutParams params;
		if(horizontal)params = new LayoutParams((int)(w*(1-d)), h );
		else params = new LayoutParams(w, (int)(h*(1-d)));
		grupo.setLayoutParams(params);
		if(horizontal)grupo.setTranslationX(x+d*w);
	}
	protected void setaLingua(){
		SalvavelTextiveis.setaLingua(lingua);
		entradaNomeArquivo.setHint(lingua.NomeArquivo);
		setaTipo.setText( abrir ? lingua.Abrir : lingua.Salvar);
		Deletar=lingua.deleta+"?";
		textoconfirma.setText(sobreescrever ? lingua.sobreescrever : Deletar);
		nomeAtividade = pegaNomeAtividade();
		this.setTitle(nomeAtividade);
		Salvar = lingua.Salvar;
		Abrir = lingua.Abrir;
		Sobreescrever = lingua.sobreescrever;
		if(menuSetado)setaLinguaMenus();
	}
	protected abstract String pegaNomeAtividade();
	public void seleciona(View v){
		entradaNomeArquivo.setText( ( ( Button )v).getText());
	}
	private void mandaArquivo() {
		Mensageiro.carrega=false;
		int i = -1;
		char c = '0';
		while(c!=' '){
			i++;
			c=Mensageiro.arquivo.charAt(i);
		}
		mandaArquivo(Mensageiro.arquivo.substring(0, i));
	}
	private void mandaArquivo(String s) {
		Intent intent;
		if(s.equals("AFD"))intent = new Intent(pegaContexto(), AFDActivity.class);
		else if(s.equals("AFN"))intent = new Intent(pegaContexto(), AFNActivity.class);
		else if(s.equals("AFNL"))intent = new Intent(pegaContexto(), AFNLActivity.class);
		else if(s.equals("GRE") || s.equals("GRD"))intent = new Intent(pegaContexto(), GRActivity.class);
		else if(s.equals("ER"))intent = new Intent(pegaContexto(), ERActivity.class);
		else if(s.equals("Mealy"))intent = new Intent(pegaContexto(), MealyActivity.class);
		else intent = new Intent(pegaContexto(), MooreActivity.class);
	    startActivity(intent);
	}
	protected boolean telaPequena(){
		return 3 > (getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK);
	}
}
